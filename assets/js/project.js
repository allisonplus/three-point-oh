'use strict';

/**
 * File carousel-testimonials.js
 *
 * Functionality for testimonials: https://flickity.metafizzy.co
 */
var elem = document.querySelector('.testimonials-shell');
var flkty = new Flickity(elem, {
	// Options.
	cellAlign: 'left',
	contain: true,
	pageDots: false,
	imagesLoaded: true
});

// Selector for specific/individual section.
var portfolio = document.querySelector('.image-gallery');
var portfolioSingle = new Flickity(portfolio, {
	// Options.
	cellAlign: 'center',
	contain: true,
	pageDots: false,
	imagesLoaded: true
});
'use strict';

/**
 * File js-enabled.js
 *
 * If Javascript is enabled, replace the <body> class "no-js".
 */
document.body.className = document.body.className.replace('no-js', 'js');
'use strict';

/**
 * File mobile-nav-menu.js
 *
 * Based on sliding panel from http://refills.bourbon.io/components/
 */
window.Mobile_Nav_Slide = {};
(function (window, $, app) {

	// Constructor.
	app.init = function () {
		app.cache();

		if (app.meetsRequirements()) {
			app.bindEvents();
		}
	};

	// Cache all the things.
	app.cache = function () {
		app.$c = {
			window: $(window),
			body: $('body'),
			button: $('.sliding-panel-button'),
			nav: $('.menu-primary-menu-container'),
			panelContent: $('.sliding-panel-content')
		};
	};

	// Combine all events.
	app.bindEvents = function () {
		app.$c.button.on('click', app.toggleNav);
	};

	// Do we meet the requirements?
	app.meetsRequirements = function () {
		return app.$c.panelContent.length;
	};

	// Toggle the form open and close.
	app.toggleNav = function (e) {
		app.$c.body.toggleClass('sidebar-is-open');
		app.$c.button.toggleClass('open');
		app.$c.panelContent.toggleClass('is-visible');
		app.$c.nav.toggleClass('is-visible');
	};

	// Engage!
	$(app.init);
})(window, jQuery, window.Mobile_Nav_Slide);
"use strict";

/* http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript+css-extras+json+php+php-extras+sass+scss */
var _self = "undefined" != typeof window ? window : "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {},
    Prism = function () {
  var e = /\blang(?:uage)?-(\w+)\b/i,
      t = 0,
      n = _self.Prism = { util: { encode: function encode(e) {
        return e instanceof a ? new a(e.type, n.util.encode(e.content), e.alias) : "Array" === n.util.type(e) ? e.map(n.util.encode) : e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
      }, type: function type(e) {
        return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1];
      }, objId: function objId(e) {
        return e.__id || Object.defineProperty(e, "__id", { value: ++t }), e.__id;
      }, clone: function clone(e) {
        var t = n.util.type(e);switch (t) {case "Object":
            var a = {};for (var r in e) {
              e.hasOwnProperty(r) && (a[r] = n.util.clone(e[r]));
            }return a;case "Array":
            return e.map && e.map(function (e) {
              return n.util.clone(e);
            });}return e;
      } }, languages: { extend: function extend(e, t) {
        var a = n.util.clone(n.languages[e]);for (var r in t) {
          a[r] = t[r];
        }return a;
      }, insertBefore: function insertBefore(e, t, a, r) {
        r = r || n.languages;var i = r[e];if (2 == arguments.length) {
          a = arguments[1];for (var l in a) {
            a.hasOwnProperty(l) && (i[l] = a[l]);
          }return i;
        }var o = {};for (var s in i) {
          if (i.hasOwnProperty(s)) {
            if (s == t) for (var l in a) {
              a.hasOwnProperty(l) && (o[l] = a[l]);
            }o[s] = i[s];
          }
        }return n.languages.DFS(n.languages, function (t, n) {
          n === r[e] && t != e && (this[t] = o);
        }), r[e] = o;
      }, DFS: function DFS(e, t, a, r) {
        r = r || {};for (var i in e) {
          e.hasOwnProperty(i) && (t.call(e, i, e[i], a || i), "Object" !== n.util.type(e[i]) || r[n.util.objId(e[i])] ? "Array" !== n.util.type(e[i]) || r[n.util.objId(e[i])] || (r[n.util.objId(e[i])] = !0, n.languages.DFS(e[i], t, i, r)) : (r[n.util.objId(e[i])] = !0, n.languages.DFS(e[i], t, null, r)));
        }
      } }, plugins: {}, highlightAll: function highlightAll(e, t) {
      var a = { callback: t, selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code' };n.hooks.run("before-highlightall", a);for (var r, i = a.elements || document.querySelectorAll(a.selector), l = 0; r = i[l++];) {
        n.highlightElement(r, e === !0, a.callback);
      }
    }, highlightElement: function highlightElement(t, a, r) {
      for (var i, l, o = t; o && !e.test(o.className);) {
        o = o.parentNode;
      }o && (i = (o.className.match(e) || [, ""])[1].toLowerCase(), l = n.languages[i]), t.className = t.className.replace(e, "").replace(/\s+/g, " ") + " language-" + i, o = t.parentNode, /pre/i.test(o.nodeName) && (o.className = o.className.replace(e, "").replace(/\s+/g, " ") + " language-" + i);var s = t.textContent,
          u = { element: t, language: i, grammar: l, code: s };if (n.hooks.run("before-sanity-check", u), !u.code || !u.grammar) return u.code && (u.element.textContent = u.code), n.hooks.run("complete", u), void 0;if (n.hooks.run("before-highlight", u), a && _self.Worker) {
        var g = new Worker(n.filename);g.onmessage = function (e) {
          u.highlightedCode = e.data, n.hooks.run("before-insert", u), u.element.innerHTML = u.highlightedCode, r && r.call(u.element), n.hooks.run("after-highlight", u), n.hooks.run("complete", u);
        }, g.postMessage(JSON.stringify({ language: u.language, code: u.code, immediateClose: !0 }));
      } else u.highlightedCode = n.highlight(u.code, u.grammar, u.language), n.hooks.run("before-insert", u), u.element.innerHTML = u.highlightedCode, r && r.call(t), n.hooks.run("after-highlight", u), n.hooks.run("complete", u);
    }, highlight: function highlight(e, t, r) {
      var i = n.tokenize(e, t);return a.stringify(n.util.encode(i), r);
    }, tokenize: function tokenize(e, t) {
      var a = n.Token,
          r = [e],
          i = t.rest;if (i) {
        for (var l in i) {
          t[l] = i[l];
        }delete t.rest;
      }e: for (var l in t) {
        if (t.hasOwnProperty(l) && t[l]) {
          var o = t[l];o = "Array" === n.util.type(o) ? o : [o];for (var s = 0; s < o.length; ++s) {
            var u = o[s],
                g = u.inside,
                c = !!u.lookbehind,
                h = !!u.greedy,
                f = 0,
                d = u.alias;if (h && !u.pattern.global) {
              var p = u.pattern.toString().match(/[imuy]*$/)[0];u.pattern = RegExp(u.pattern.source, p + "g");
            }u = u.pattern || u;for (var m = 0, y = 0; m < r.length; y += r[m].length, ++m) {
              var v = r[m];if (r.length > e.length) break e;if (!(v instanceof a)) {
                u.lastIndex = 0;var b = u.exec(v),
                    k = 1;if (!b && h && m != r.length - 1) {
                  if (u.lastIndex = y, b = u.exec(e), !b) break;for (var w = b.index + (c ? b[1].length : 0), _ = b.index + b[0].length, A = m, P = y, j = r.length; j > A && _ > P; ++A) {
                    P += r[A].length, w >= P && (++m, y = P);
                  }if (r[m] instanceof a || r[A - 1].greedy) continue;k = A - m, v = e.slice(y, P), b.index -= y;
                }if (b) {
                  c && (f = b[1].length);var w = b.index + f,
                      b = b[0].slice(f),
                      _ = w + b.length,
                      x = v.slice(0, w),
                      O = v.slice(_),
                      S = [m, k];x && S.push(x);var N = new a(l, g ? n.tokenize(b, g) : b, d, b, h);S.push(N), O && S.push(O), Array.prototype.splice.apply(r, S);
                }
              }
            }
          }
        }
      }return r;
    }, hooks: { all: {}, add: function add(e, t) {
        var a = n.hooks.all;a[e] = a[e] || [], a[e].push(t);
      }, run: function run(e, t) {
        var a = n.hooks.all[e];if (a && a.length) for (var r, i = 0; r = a[i++];) {
          r(t);
        }
      } } },
      a = n.Token = function (e, t, n, a, r) {
    this.type = e, this.content = t, this.alias = n, this.length = 0 | (a || "").length, this.greedy = !!r;
  };if (a.stringify = function (e, t, r) {
    if ("string" == typeof e) return e;if ("Array" === n.util.type(e)) return e.map(function (n) {
      return a.stringify(n, t, e);
    }).join("");var i = { type: e.type, content: a.stringify(e.content, t, r), tag: "span", classes: ["token", e.type], attributes: {}, language: t, parent: r };if ("comment" == i.type && (i.attributes.spellcheck = "true"), e.alias) {
      var l = "Array" === n.util.type(e.alias) ? e.alias : [e.alias];Array.prototype.push.apply(i.classes, l);
    }n.hooks.run("wrap", i);var o = Object.keys(i.attributes).map(function (e) {
      return e + '="' + (i.attributes[e] || "").replace(/"/g, "&quot;") + '"';
    }).join(" ");return "<" + i.tag + ' class="' + i.classes.join(" ") + '"' + (o ? " " + o : "") + ">" + i.content + "</" + i.tag + ">";
  }, !_self.document) return _self.addEventListener ? (_self.addEventListener("message", function (e) {
    var t = JSON.parse(e.data),
        a = t.language,
        r = t.code,
        i = t.immediateClose;_self.postMessage(n.highlight(r, n.languages[a], a)), i && _self.close();
  }, !1), _self.Prism) : _self.Prism;var r = document.currentScript || [].slice.call(document.getElementsByTagName("script")).pop();return r && (n.filename = r.src, document.addEventListener && !r.hasAttribute("data-manual") && ("loading" !== document.readyState ? window.requestAnimationFrame ? window.requestAnimationFrame(n.highlightAll) : window.setTimeout(n.highlightAll, 16) : document.addEventListener("DOMContentLoaded", n.highlightAll))), _self.Prism;
}();"undefined" != typeof module && module.exports && (module.exports = Prism), "undefined" != typeof global && (global.Prism = Prism);
Prism.languages.markup = { comment: /<!--[\w\W]*?-->/, prolog: /<\?[\w\W]+?\?>/, doctype: /<!DOCTYPE[\w\W]+?>/i, cdata: /<!\[CDATA\[[\w\W]*?]]>/i, tag: { pattern: /<\/?(?!\d)[^\s>\/=$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i, inside: { tag: { pattern: /^<\/?[^\s>\/]+/i, inside: { punctuation: /^<\/?/, namespace: /^[^\s>\/:]+:/ } }, "attr-value": { pattern: /=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i, inside: { punctuation: /[=>"']/ } }, punctuation: /\/?>/, "attr-name": { pattern: /[^\s>\/]+/, inside: { namespace: /^[^\s>\/:]+:/ } } } }, entity: /&#?[\da-z]{1,8};/i }, Prism.hooks.add("wrap", function (a) {
  "entity" === a.type && (a.attributes.title = a.content.replace(/&amp;/, "&"));
}), Prism.languages.xml = Prism.languages.markup, Prism.languages.html = Prism.languages.markup, Prism.languages.mathml = Prism.languages.markup, Prism.languages.svg = Prism.languages.markup;
Prism.languages.css = { comment: /\/\*[\w\W]*?\*\//, atrule: { pattern: /@[\w-]+?.*?(;|(?=\s*\{))/i, inside: { rule: /@[\w-]+/ } }, url: /url\((?:(["'])(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1|.*?)\)/i, selector: /[^\{\}\s][^\{\};]*?(?=\s*\{)/, string: { pattern: /("|')(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1/, greedy: !0 }, property: /(\b|\B)[\w-]+(?=\s*:)/i, important: /\B!important\b/i, "function": /[-a-z0-9]+(?=\()/i, punctuation: /[(){};:]/ }, Prism.languages.css.atrule.inside.rest = Prism.util.clone(Prism.languages.css), Prism.languages.markup && (Prism.languages.insertBefore("markup", "tag", { style: { pattern: /(<style[\w\W]*?>)[\w\W]*?(?=<\/style>)/i, lookbehind: !0, inside: Prism.languages.css, alias: "language-css" } }), Prism.languages.insertBefore("inside", "attr-value", { "style-attr": { pattern: /\s*style=("|').*?\1/i, inside: { "attr-name": { pattern: /^\s*style/i, inside: Prism.languages.markup.tag.inside }, punctuation: /^\s*=\s*['"]|['"]\s*$/, "attr-value": { pattern: /.+/i, inside: Prism.languages.css } }, alias: "language-css" } }, Prism.languages.markup.tag));
Prism.languages.clike = { comment: [{ pattern: /(^|[^\\])\/\*[\w\W]*?\*\//, lookbehind: !0 }, { pattern: /(^|[^\\:])\/\/.*/, lookbehind: !0 }], string: { pattern: /(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: !0 }, "class-name": { pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i, lookbehind: !0, inside: { punctuation: /(\.|\\)/ } }, keyword: /\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/, "boolean": /\b(true|false)\b/, "function": /[a-z0-9_]+(?=\()/i, number: /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i, operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/, punctuation: /[{}[\];(),.:]/ };
Prism.languages.javascript = Prism.languages.extend("clike", { keyword: /\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/, number: /\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/, "function": /[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i, operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*\*?|\/|~|\^|%|\.{3}/ }), Prism.languages.insertBefore("javascript", "keyword", { regex: { pattern: /(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/, lookbehind: !0, greedy: !0 } }), Prism.languages.insertBefore("javascript", "string", { "template-string": { pattern: /`(?:\\\\|\\?[^\\])*?`/, greedy: !0, inside: { interpolation: { pattern: /\$\{[^}]+\}/, inside: { "interpolation-punctuation": { pattern: /^\$\{|\}$/, alias: "punctuation" }, rest: Prism.languages.javascript } }, string: /[\s\S]+/ } } }), Prism.languages.markup && Prism.languages.insertBefore("markup", "tag", { script: { pattern: /(<script[\w\W]*?>)[\w\W]*?(?=<\/script>)/i, lookbehind: !0, inside: Prism.languages.javascript, alias: "language-javascript" } }), Prism.languages.js = Prism.languages.javascript;
Prism.languages.css.selector = { pattern: /[^\{\}\s][^\{\}]*(?=\s*\{)/, inside: { "pseudo-element": /:(?:after|before|first-letter|first-line|selection)|::[-\w]+/, "pseudo-class": /:[-\w]+(?:\(.*\))?/, "class": /\.[-:\.\w]+/, id: /#[-:\.\w]+/, attribute: /\[[^\]]+\]/ } }, Prism.languages.insertBefore("css", "function", { hexcode: /#[\da-f]{3,6}/i, entity: /\\[\da-f]{1,8}/i, number: /[\d%\.]+/ });
Prism.languages.json = { property: /"(?:\\.|[^|"])*"(?=\s*:)/gi, string: /"(?!:)(?:\\.|[^|"])*"(?!:)/g, number: /\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee][+-]?\d+)?)\b/g, punctuation: /[{}[\]);,]/g, operator: /:/g, "boolean": /\b(true|false)\b/gi, "null": /\bnull\b/gi }, Prism.languages.jsonp = Prism.languages.json;
Prism.languages.php = Prism.languages.extend("clike", { keyword: /\b(and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\b/i, constant: /\b[A-Z0-9_]{2,}\b/, comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|\/\/.*)/, lookbehind: !0, greedy: !0 } }), Prism.languages.insertBefore("php", "class-name", { "shell-comment": { pattern: /(^|[^\\])#.*/, lookbehind: !0, alias: "comment" } }), Prism.languages.insertBefore("php", "keyword", { delimiter: /\?>|<\?(?:php)?/i, variable: /\$\w+\b/i, "package": { pattern: /(\\|namespace\s+|use\s+)[\w\\]+/, lookbehind: !0, inside: { punctuation: /\\/ } } }), Prism.languages.insertBefore("php", "operator", { property: { pattern: /(->)[\w]+/, lookbehind: !0 } }), Prism.languages.markup && (Prism.hooks.add("before-highlight", function (e) {
  "php" === e.language && (e.tokenStack = [], e.backupCode = e.code, e.code = e.code.replace(/(?:<\?php|<\?)[\w\W]*?(?:\?>)/gi, function (a) {
    return e.tokenStack.push(a), "{{{PHP" + e.tokenStack.length + "}}}";
  }));
}), Prism.hooks.add("before-insert", function (e) {
  "php" === e.language && (e.code = e.backupCode, delete e.backupCode);
}), Prism.hooks.add("after-highlight", function (e) {
  if ("php" === e.language) {
    for (var a, n = 0; a = e.tokenStack[n]; n++) {
      e.highlightedCode = e.highlightedCode.replace("{{{PHP" + (n + 1) + "}}}", Prism.highlight(a, e.grammar, "php").replace(/\$/g, "$$$$"));
    }e.element.innerHTML = e.highlightedCode;
  }
}), Prism.hooks.add("wrap", function (e) {
  "php" === e.language && "markup" === e.type && (e.content = e.content.replace(/(\{\{\{PHP[0-9]+\}\}\})/g, '<span class="token php">$1</span>'));
}), Prism.languages.insertBefore("php", "comment", { markup: { pattern: /<[^?]\/?(.*?)>/, inside: Prism.languages.markup }, php: /\{\{\{PHP[0-9]+\}\}\}/ }));
Prism.languages.insertBefore("php", "variable", { "this": /\$this\b/, global: /\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)/, scope: { pattern: /\b[\w\\]+::/, inside: { keyword: /(static|self|parent)/, punctuation: /(::|\\)/ } } });
!function (e) {
  e.languages.sass = e.languages.extend("css", { comment: { pattern: /^([ \t]*)\/[\/*].*(?:(?:\r?\n|\r)\1[ \t]+.+)*/m, lookbehind: !0 } }), e.languages.insertBefore("sass", "atrule", { "atrule-line": { pattern: /^(?:[ \t]*)[@+=].+/m, inside: { atrule: /(?:@[\w-]+|[+=])/m } } }), delete e.languages.sass.atrule;var a = /((\$[-_\w]+)|(#\{\$[-_\w]+\}))/i,
      t = [/[+*\/%]|[=!]=|<=?|>=?|\b(?:and|or|not)\b/, { pattern: /(\s+)-(?=\s)/, lookbehind: !0 }];e.languages.insertBefore("sass", "property", { "variable-line": { pattern: /^[ \t]*\$.+/m, inside: { punctuation: /:/, variable: a, operator: t } }, "property-line": { pattern: /^[ \t]*(?:[^:\s]+ *:.*|:[^:\s]+.*)/m, inside: { property: [/[^:\s]+(?=\s*:)/, { pattern: /(:)[^:\s]+/, lookbehind: !0 }], punctuation: /:/, variable: a, operator: t, important: e.languages.sass.important } } }), delete e.languages.sass.property, delete e.languages.sass.important, delete e.languages.sass.selector, e.languages.insertBefore("sass", "punctuation", { selector: { pattern: /([ \t]*)\S(?:,?[^,\r\n]+)*(?:,(?:\r?\n|\r)\1[ \t]+\S(?:,?[^,\r\n]+)*)*/, lookbehind: !0 } });
}(Prism);
Prism.languages.scss = Prism.languages.extend("css", { comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|\/\/.*)/, lookbehind: !0 }, atrule: { pattern: /@[\w-]+(?:\([^()]+\)|[^(])*?(?=\s+[{;])/, inside: { rule: /@[\w-]+/ } }, url: /(?:[-a-z]+-)*url(?=\()/i, selector: { pattern: /(?=\S)[^@;\{\}\(\)]?([^@;\{\}\(\)]|&|#\{\$[-_\w]+\})+(?=\s*\{(\}|\s|[^\}]+(:|\{)[^\}]+))/m, inside: { parent: { pattern: /&/, alias: "important" }, placeholder: /%[-_\w]+/, variable: /\$[-_\w]+|#\{\$[-_\w]+\}/ } } }), Prism.languages.insertBefore("scss", "atrule", { keyword: [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, { pattern: /( +)(?:from|through)(?= )/, lookbehind: !0 }] }), Prism.languages.scss.property = { pattern: /(?:[\w-]|\$[-_\w]+|#\{\$[-_\w]+\})+(?=\s*:)/i, inside: { variable: /\$[-_\w]+|#\{\$[-_\w]+\}/ } }, Prism.languages.insertBefore("scss", "important", { variable: /\$[-_\w]+|#\{\$[-_\w]+\}/ }), Prism.languages.insertBefore("scss", "function", { placeholder: { pattern: /%[-_\w]+/, alias: "selector" }, statement: { pattern: /\B!(?:default|optional)\b/i, alias: "keyword" }, "boolean": /\b(?:true|false)\b/, "null": /\bnull\b/, operator: { pattern: /(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|or|not)(?=\s)/, lookbehind: !0 } }), Prism.languages.scss.atrule.inside.rest = Prism.util.clone(Prism.languages.scss);
'use strict';

/**
 * File skip-link-focus-fix.js.
 *
 * Helps with accessibility for keyboard only users.
 *
 * Learn more: https://git.io/vWdr2
 */
(function () {
	var isWebkit = navigator.userAgent.toLowerCase().indexOf('webkit') > -1,
	    isOpera = navigator.userAgent.toLowerCase().indexOf('opera') > -1,
	    isIe = navigator.userAgent.toLowerCase().indexOf('msie') > -1;

	if ((isWebkit || isOpera || isIe) && document.getElementById && window.addEventListener) {
		window.addEventListener('hashchange', function () {
			var id = location.hash.substring(1),
			    element;

			if (!/^[A-z0-9_-]+$/.test(id)) {
				return;
			}

			element = document.getElementById(id);

			if (element) {
				if (!/^(?:a|select|input|button|textarea)$/i.test(element.tagName)) {
					element.tabIndex = -1;
				}

				element.focus();
			}
		}, false);
	}
})();
'use strict';

/**
 * File window-ready.js
 *
 * Add a "ready" class to <body> when window is ready.
 */
window.Window_Ready = {};
(function (window, $, that) {

	// Constructor.
	that.init = function () {
		that.cache();
		that.bindEvents();
	};

	// Cache document elements.
	that.cache = function () {
		that.$c = {
			window: $(window),
			body: $(document.body)
		};
	};

	// Combine all events.
	that.bindEvents = function () {
		that.$c.window.load(that.addBodyClass);
	};

	// Add a class to <body>.
	that.addBodyClass = function () {
		that.$c.body.addClass('ready');
	};

	// Engage!
	$(that.init);
})(window, jQuery, window.Window_Ready);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcm91c2Vscy5qcyIsImpzLWVuYWJsZWQuanMiLCJtb2JpbGUtbmF2LW1lbnUuanMiLCJwcmlzbS5qcyIsInNraXAtbGluay1mb2N1cy1maXguanMiLCJ3aW5kb3ctcmVhZHkuanMiXSwibmFtZXMiOlsiZWxlbSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImZsa3R5IiwiRmxpY2tpdHkiLCJjZWxsQWxpZ24iLCJjb250YWluIiwicGFnZURvdHMiLCJpbWFnZXNMb2FkZWQiLCJwb3J0Zm9saW8iLCJwb3J0Zm9saW9TaW5nbGUiLCJib2R5IiwiY2xhc3NOYW1lIiwicmVwbGFjZSIsIndpbmRvdyIsIk1vYmlsZV9OYXZfU2xpZGUiLCIkIiwiYXBwIiwiaW5pdCIsImNhY2hlIiwibWVldHNSZXF1aXJlbWVudHMiLCJiaW5kRXZlbnRzIiwiJGMiLCJidXR0b24iLCJuYXYiLCJwYW5lbENvbnRlbnQiLCJvbiIsInRvZ2dsZU5hdiIsImxlbmd0aCIsImUiLCJ0b2dnbGVDbGFzcyIsImpRdWVyeSIsIl9zZWxmIiwiV29ya2VyR2xvYmFsU2NvcGUiLCJzZWxmIiwiUHJpc20iLCJ0IiwibiIsInV0aWwiLCJlbmNvZGUiLCJhIiwidHlwZSIsImNvbnRlbnQiLCJhbGlhcyIsIm1hcCIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIm1hdGNoIiwib2JqSWQiLCJfX2lkIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImNsb25lIiwiciIsImhhc093blByb3BlcnR5IiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwiaW5zZXJ0QmVmb3JlIiwiaSIsImFyZ3VtZW50cyIsImwiLCJvIiwicyIsIkRGUyIsInBsdWdpbnMiLCJoaWdobGlnaHRBbGwiLCJjYWxsYmFjayIsInNlbGVjdG9yIiwiaG9va3MiLCJydW4iLCJlbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJoaWdobGlnaHRFbGVtZW50IiwidGVzdCIsInBhcmVudE5vZGUiLCJ0b0xvd2VyQ2FzZSIsIm5vZGVOYW1lIiwidGV4dENvbnRlbnQiLCJ1IiwiZWxlbWVudCIsImxhbmd1YWdlIiwiZ3JhbW1hciIsImNvZGUiLCJXb3JrZXIiLCJnIiwiZmlsZW5hbWUiLCJvbm1lc3NhZ2UiLCJoaWdobGlnaHRlZENvZGUiLCJkYXRhIiwiaW5uZXJIVE1MIiwicG9zdE1lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwiaW1tZWRpYXRlQ2xvc2UiLCJoaWdobGlnaHQiLCJ0b2tlbml6ZSIsIlRva2VuIiwicmVzdCIsImluc2lkZSIsImMiLCJsb29rYmVoaW5kIiwiaCIsImdyZWVkeSIsImYiLCJkIiwicGF0dGVybiIsImdsb2JhbCIsInAiLCJSZWdFeHAiLCJzb3VyY2UiLCJtIiwieSIsInYiLCJsYXN0SW5kZXgiLCJiIiwiZXhlYyIsImsiLCJ3IiwiaW5kZXgiLCJfIiwiQSIsIlAiLCJqIiwic2xpY2UiLCJ4IiwiTyIsIlMiLCJwdXNoIiwiTiIsIkFycmF5Iiwic3BsaWNlIiwiYXBwbHkiLCJhbGwiLCJhZGQiLCJqb2luIiwidGFnIiwiY2xhc3NlcyIsImF0dHJpYnV0ZXMiLCJwYXJlbnQiLCJzcGVsbGNoZWNrIiwia2V5cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXJzZSIsImNsb3NlIiwiY3VycmVudFNjcmlwdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicG9wIiwic3JjIiwiaGFzQXR0cmlidXRlIiwicmVhZHlTdGF0ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJtb2R1bGUiLCJleHBvcnRzIiwibWFya3VwIiwiY29tbWVudCIsInByb2xvZyIsImRvY3R5cGUiLCJjZGF0YSIsInB1bmN0dWF0aW9uIiwibmFtZXNwYWNlIiwiZW50aXR5IiwidGl0bGUiLCJ4bWwiLCJodG1sIiwibWF0aG1sIiwic3ZnIiwiY3NzIiwiYXRydWxlIiwicnVsZSIsInVybCIsInN0cmluZyIsInByb3BlcnR5IiwiaW1wb3J0YW50Iiwic3R5bGUiLCJjbGlrZSIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciIsImphdmFzY3JpcHQiLCJyZWdleCIsImludGVycG9sYXRpb24iLCJzY3JpcHQiLCJqcyIsImlkIiwiYXR0cmlidXRlIiwiaGV4Y29kZSIsImpzb24iLCJqc29ucCIsInBocCIsImNvbnN0YW50IiwiZGVsaW1pdGVyIiwidmFyaWFibGUiLCJ0b2tlblN0YWNrIiwiYmFja3VwQ29kZSIsInNjb3BlIiwic2FzcyIsInNjc3MiLCJwbGFjZWhvbGRlciIsInN0YXRlbWVudCIsImlzV2Via2l0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaW5kZXhPZiIsImlzT3BlcmEiLCJpc0llIiwiZ2V0RWxlbWVudEJ5SWQiLCJsb2NhdGlvbiIsImhhc2giLCJzdWJzdHJpbmciLCJ0YWdOYW1lIiwidGFiSW5kZXgiLCJmb2N1cyIsIldpbmRvd19SZWFkeSIsInRoYXQiLCJsb2FkIiwiYWRkQm9keUNsYXNzIiwiYWRkQ2xhc3MiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7O0FBS0EsSUFBSUEsT0FBT0MsU0FBU0MsYUFBVCxDQUF3QixxQkFBeEIsQ0FBWDtBQUNBLElBQUlDLFFBQVEsSUFBSUMsUUFBSixDQUFjSixJQUFkLEVBQW9CO0FBQy9CO0FBQ0FLLFlBQVcsTUFGb0I7QUFHL0JDLFVBQVMsSUFIc0I7QUFJL0JDLFdBQVUsS0FKcUI7QUFLL0JDLGVBQWM7QUFMaUIsQ0FBcEIsQ0FBWjs7QUFRQTtBQUNBLElBQUlDLFlBQVlSLFNBQVNDLGFBQVQsQ0FBd0IsZ0JBQXhCLENBQWhCO0FBQ0EsSUFBSVEsa0JBQWtCLElBQUlOLFFBQUosQ0FBY0ssU0FBZCxFQUF5QjtBQUM5QztBQUNBSixZQUFXLFFBRm1DO0FBRzlDQyxVQUFTLElBSHFDO0FBSTlDQyxXQUFVLEtBSm9DO0FBSzlDQyxlQUFjO0FBTGdDLENBQXpCLENBQXRCOzs7QUNoQkE7Ozs7O0FBS0FQLFNBQVNVLElBQVQsQ0FBY0MsU0FBZCxHQUEwQlgsU0FBU1UsSUFBVCxDQUFjQyxTQUFkLENBQXdCQyxPQUF4QixDQUFpQyxPQUFqQyxF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Qm9CakIsT0FBT3lNLFlBN0IzQiIsImZpbGUiOiJwcm9qZWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBGaWxlIGNhcm91c2VsLXRlc3RpbW9uaWFscy5qc1xuICpcbiAqIEZ1bmN0aW9uYWxpdHkgZm9yIHRlc3RpbW9uaWFsczogaHR0cHM6Ly9mbGlja2l0eS5tZXRhZml6enkuY29cbiAqL1xudmFyIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnLnRlc3RpbW9uaWFscy1zaGVsbCcgKTtcbnZhciBmbGt0eSA9IG5ldyBGbGlja2l0eSggZWxlbSwge1xuXHQvLyBPcHRpb25zLlxuXHRjZWxsQWxpZ246ICdsZWZ0Jyxcblx0Y29udGFpbjogdHJ1ZSxcblx0cGFnZURvdHM6IGZhbHNlLFxuXHRpbWFnZXNMb2FkZWQ6IHRydWUsXG59KTtcblxuLy8gU2VsZWN0b3IgZm9yIHNwZWNpZmljL2luZGl2aWR1YWwgc2VjdGlvbi5cbnZhciBwb3J0Zm9saW8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnLmltYWdlLWdhbGxlcnknICk7XG52YXIgcG9ydGZvbGlvU2luZ2xlID0gbmV3IEZsaWNraXR5KCBwb3J0Zm9saW8sIHtcblx0Ly8gT3B0aW9ucy5cblx0Y2VsbEFsaWduOiAnY2VudGVyJyxcblx0Y29udGFpbjogdHJ1ZSxcblx0cGFnZURvdHM6IGZhbHNlLFxuXHRpbWFnZXNMb2FkZWQ6IHRydWUsXG59KTtcbiIsIi8qKlxuICogRmlsZSBqcy1lbmFibGVkLmpzXG4gKlxuICogSWYgSmF2YXNjcmlwdCBpcyBlbmFibGVkLCByZXBsYWNlIHRoZSA8Ym9keT4gY2xhc3MgXCJuby1qc1wiLlxuICovXG5kb2N1bWVudC5ib2R5LmNsYXNzTmFtZSA9IGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lLnJlcGxhY2UoICduby1qcycsICdqcycgKTsiLCIgLyoqXG4gICogRmlsZSBtb2JpbGUtbmF2LW1lbnUuanNcbiAgKlxuICAqIEJhc2VkIG9uIHNsaWRpbmcgcGFuZWwgZnJvbSBodHRwOi8vcmVmaWxscy5ib3VyYm9uLmlvL2NvbXBvbmVudHMvXG4gICovXG53aW5kb3cuTW9iaWxlX05hdl9TbGlkZSA9IHt9O1xuKCBmdW5jdGlvbiggd2luZG93LCAkLCBhcHAgKSB7XG5cblx0Ly8gQ29uc3RydWN0b3IuXG5cdGFwcC5pbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0YXBwLmNhY2hlKCk7XG5cblx0XHRpZiAoIGFwcC5tZWV0c1JlcXVpcmVtZW50cygpICkge1xuXHRcdFx0YXBwLmJpbmRFdmVudHMoKTtcblx0XHR9XG5cdH07XG5cblx0Ly8gQ2FjaGUgYWxsIHRoZSB0aGluZ3MuXG5cdGFwcC5jYWNoZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGFwcC4kYyA9IHtcblx0XHRcdHdpbmRvdzogJCh3aW5kb3cpLFxuXHRcdFx0Ym9keTogJCggJ2JvZHknICksXG5cdFx0XHRidXR0b246ICQoICcuc2xpZGluZy1wYW5lbC1idXR0b24nICksXG5cdFx0XHRuYXY6ICQoICcubWVudS1wcmltYXJ5LW1lbnUtY29udGFpbmVyJyApLFxuXHRcdFx0cGFuZWxDb250ZW50OiAkKCAnLnNsaWRpbmctcGFuZWwtY29udGVudCcgKSxcblx0XHR9O1xuXHR9O1xuXG5cdC8vIENvbWJpbmUgYWxsIGV2ZW50cy5cblx0YXBwLmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcblx0XHRhcHAuJGMuYnV0dG9uLm9uKCAnY2xpY2snLCBhcHAudG9nZ2xlTmF2ICk7XG5cdH07XG5cblx0Ly8gRG8gd2UgbWVldCB0aGUgcmVxdWlyZW1lbnRzP1xuXHRhcHAubWVldHNSZXF1aXJlbWVudHMgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gYXBwLiRjLnBhbmVsQ29udGVudC5sZW5ndGg7XG5cdH07XG5cblx0Ly8gVG9nZ2xlIHRoZSBmb3JtIG9wZW4gYW5kIGNsb3NlLlxuXHRhcHAudG9nZ2xlTmF2ID0gZnVuY3Rpb24oZSkge1xuXHRcdGFwcC4kYy5ib2R5LnRvZ2dsZUNsYXNzKCAnc2lkZWJhci1pcy1vcGVuJyApO1xuXHRcdGFwcC4kYy5idXR0b24udG9nZ2xlQ2xhc3MoICdvcGVuJyApO1xuXHRcdGFwcC4kYy5wYW5lbENvbnRlbnQudG9nZ2xlQ2xhc3MoICdpcy12aXNpYmxlJyApO1xuXHRcdGFwcC4kYy5uYXYudG9nZ2xlQ2xhc3MoICdpcy12aXNpYmxlJyApO1xuXHR9O1xuXG5cdC8vIEVuZ2FnZSFcblx0JCggYXBwLmluaXQgKTtcblxufSkoIHdpbmRvdywgalF1ZXJ5LCB3aW5kb3cuTW9iaWxlX05hdl9TbGlkZSApO1xuIiwiLyogaHR0cDovL3ByaXNtanMuY29tL2Rvd25sb2FkLmh0bWw/dGhlbWVzPXByaXNtJmxhbmd1YWdlcz1tYXJrdXArY3NzK2NsaWtlK2phdmFzY3JpcHQrY3NzLWV4dHJhcytqc29uK3BocCtwaHAtZXh0cmFzK3Nhc3Mrc2NzcyAqL1xudmFyIF9zZWxmPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSYmc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlP3NlbGY6e30sUHJpc209ZnVuY3Rpb24oKXt2YXIgZT0vXFxibGFuZyg/OnVhZ2UpPy0oXFx3KylcXGIvaSx0PTAsbj1fc2VsZi5QcmlzbT17dXRpbDp7ZW5jb2RlOmZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgYT9uZXcgYShlLnR5cGUsbi51dGlsLmVuY29kZShlLmNvbnRlbnQpLGUuYWxpYXMpOlwiQXJyYXlcIj09PW4udXRpbC50eXBlKGUpP2UubWFwKG4udXRpbC5lbmNvZGUpOmUucmVwbGFjZSgvJi9nLFwiJmFtcDtcIikucmVwbGFjZSgvPC9nLFwiJmx0O1wiKS5yZXBsYWNlKC9cXHUwMGEwL2csXCIgXCIpfSx0eXBlOmZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkubWF0Y2goL1xcW29iamVjdCAoXFx3KylcXF0vKVsxXX0sb2JqSWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX19pZHx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2lkXCIse3ZhbHVlOisrdH0pLGUuX19pZH0sY2xvbmU6ZnVuY3Rpb24oZSl7dmFyIHQ9bi51dGlsLnR5cGUoZSk7c3dpdGNoKHQpe2Nhc2VcIk9iamVjdFwiOnZhciBhPXt9O2Zvcih2YXIgciBpbiBlKWUuaGFzT3duUHJvcGVydHkocikmJihhW3JdPW4udXRpbC5jbG9uZShlW3JdKSk7cmV0dXJuIGE7Y2FzZVwiQXJyYXlcIjpyZXR1cm4gZS5tYXAmJmUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBuLnV0aWwuY2xvbmUoZSl9KX1yZXR1cm4gZX19LGxhbmd1YWdlczp7ZXh0ZW5kOmZ1bmN0aW9uKGUsdCl7dmFyIGE9bi51dGlsLmNsb25lKG4ubGFuZ3VhZ2VzW2VdKTtmb3IodmFyIHIgaW4gdClhW3JdPXRbcl07cmV0dXJuIGF9LGluc2VydEJlZm9yZTpmdW5jdGlvbihlLHQsYSxyKXtyPXJ8fG4ubGFuZ3VhZ2VzO3ZhciBpPXJbZV07aWYoMj09YXJndW1lbnRzLmxlbmd0aCl7YT1hcmd1bWVudHNbMV07Zm9yKHZhciBsIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShsKSYmKGlbbF09YVtsXSk7cmV0dXJuIGl9dmFyIG89e307Zm9yKHZhciBzIGluIGkpaWYoaS5oYXNPd25Qcm9wZXJ0eShzKSl7aWYocz09dClmb3IodmFyIGwgaW4gYSlhLmhhc093blByb3BlcnR5KGwpJiYob1tsXT1hW2xdKTtvW3NdPWlbc119cmV0dXJuIG4ubGFuZ3VhZ2VzLkRGUyhuLmxhbmd1YWdlcyxmdW5jdGlvbih0LG4pe249PT1yW2VdJiZ0IT1lJiYodGhpc1t0XT1vKX0pLHJbZV09b30sREZTOmZ1bmN0aW9uKGUsdCxhLHIpe3I9cnx8e307Zm9yKHZhciBpIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShpKSYmKHQuY2FsbChlLGksZVtpXSxhfHxpKSxcIk9iamVjdFwiIT09bi51dGlsLnR5cGUoZVtpXSl8fHJbbi51dGlsLm9iaklkKGVbaV0pXT9cIkFycmF5XCIhPT1uLnV0aWwudHlwZShlW2ldKXx8cltuLnV0aWwub2JqSWQoZVtpXSldfHwocltuLnV0aWwub2JqSWQoZVtpXSldPSEwLG4ubGFuZ3VhZ2VzLkRGUyhlW2ldLHQsaSxyKSk6KHJbbi51dGlsLm9iaklkKGVbaV0pXT0hMCxuLmxhbmd1YWdlcy5ERlMoZVtpXSx0LG51bGwscikpKX19LHBsdWdpbnM6e30saGlnaGxpZ2h0QWxsOmZ1bmN0aW9uKGUsdCl7dmFyIGE9e2NhbGxiYWNrOnQsc2VsZWN0b3I6J2NvZGVbY2xhc3MqPVwibGFuZ3VhZ2UtXCJdLCBbY2xhc3MqPVwibGFuZ3VhZ2UtXCJdIGNvZGUsIGNvZGVbY2xhc3MqPVwibGFuZy1cIl0sIFtjbGFzcyo9XCJsYW5nLVwiXSBjb2RlJ307bi5ob29rcy5ydW4oXCJiZWZvcmUtaGlnaGxpZ2h0YWxsXCIsYSk7Zm9yKHZhciByLGk9YS5lbGVtZW50c3x8ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChhLnNlbGVjdG9yKSxsPTA7cj1pW2wrK107KW4uaGlnaGxpZ2h0RWxlbWVudChyLGU9PT0hMCxhLmNhbGxiYWNrKX0saGlnaGxpZ2h0RWxlbWVudDpmdW5jdGlvbih0LGEscil7Zm9yKHZhciBpLGwsbz10O28mJiFlLnRlc3Qoby5jbGFzc05hbWUpOylvPW8ucGFyZW50Tm9kZTtvJiYoaT0oby5jbGFzc05hbWUubWF0Y2goZSl8fFssXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCksbD1uLmxhbmd1YWdlc1tpXSksdC5jbGFzc05hbWU9dC5jbGFzc05hbWUucmVwbGFjZShlLFwiXCIpLnJlcGxhY2UoL1xccysvZyxcIiBcIikrXCIgbGFuZ3VhZ2UtXCIraSxvPXQucGFyZW50Tm9kZSwvcHJlL2kudGVzdChvLm5vZGVOYW1lKSYmKG8uY2xhc3NOYW1lPW8uY2xhc3NOYW1lLnJlcGxhY2UoZSxcIlwiKS5yZXBsYWNlKC9cXHMrL2csXCIgXCIpK1wiIGxhbmd1YWdlLVwiK2kpO3ZhciBzPXQudGV4dENvbnRlbnQsdT17ZWxlbWVudDp0LGxhbmd1YWdlOmksZ3JhbW1hcjpsLGNvZGU6c307aWYobi5ob29rcy5ydW4oXCJiZWZvcmUtc2FuaXR5LWNoZWNrXCIsdSksIXUuY29kZXx8IXUuZ3JhbW1hcilyZXR1cm4gdS5jb2RlJiYodS5lbGVtZW50LnRleHRDb250ZW50PXUuY29kZSksbi5ob29rcy5ydW4oXCJjb21wbGV0ZVwiLHUpLHZvaWQgMDtpZihuLmhvb2tzLnJ1bihcImJlZm9yZS1oaWdobGlnaHRcIix1KSxhJiZfc2VsZi5Xb3JrZXIpe3ZhciBnPW5ldyBXb3JrZXIobi5maWxlbmFtZSk7Zy5vbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7dS5oaWdobGlnaHRlZENvZGU9ZS5kYXRhLG4uaG9va3MucnVuKFwiYmVmb3JlLWluc2VydFwiLHUpLHUuZWxlbWVudC5pbm5lckhUTUw9dS5oaWdobGlnaHRlZENvZGUsciYmci5jYWxsKHUuZWxlbWVudCksbi5ob29rcy5ydW4oXCJhZnRlci1oaWdobGlnaHRcIix1KSxuLmhvb2tzLnJ1bihcImNvbXBsZXRlXCIsdSl9LGcucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoe2xhbmd1YWdlOnUubGFuZ3VhZ2UsY29kZTp1LmNvZGUsaW1tZWRpYXRlQ2xvc2U6ITB9KSl9ZWxzZSB1LmhpZ2hsaWdodGVkQ29kZT1uLmhpZ2hsaWdodCh1LmNvZGUsdS5ncmFtbWFyLHUubGFuZ3VhZ2UpLG4uaG9va3MucnVuKFwiYmVmb3JlLWluc2VydFwiLHUpLHUuZWxlbWVudC5pbm5lckhUTUw9dS5oaWdobGlnaHRlZENvZGUsciYmci5jYWxsKHQpLG4uaG9va3MucnVuKFwiYWZ0ZXItaGlnaGxpZ2h0XCIsdSksbi5ob29rcy5ydW4oXCJjb21wbGV0ZVwiLHUpfSxoaWdobGlnaHQ6ZnVuY3Rpb24oZSx0LHIpe3ZhciBpPW4udG9rZW5pemUoZSx0KTtyZXR1cm4gYS5zdHJpbmdpZnkobi51dGlsLmVuY29kZShpKSxyKX0sdG9rZW5pemU6ZnVuY3Rpb24oZSx0KXt2YXIgYT1uLlRva2VuLHI9W2VdLGk9dC5yZXN0O2lmKGkpe2Zvcih2YXIgbCBpbiBpKXRbbF09aVtsXTtkZWxldGUgdC5yZXN0fWU6Zm9yKHZhciBsIGluIHQpaWYodC5oYXNPd25Qcm9wZXJ0eShsKSYmdFtsXSl7dmFyIG89dFtsXTtvPVwiQXJyYXlcIj09PW4udXRpbC50eXBlKG8pP286W29dO2Zvcih2YXIgcz0wO3M8by5sZW5ndGg7KytzKXt2YXIgdT1vW3NdLGc9dS5pbnNpZGUsYz0hIXUubG9va2JlaGluZCxoPSEhdS5ncmVlZHksZj0wLGQ9dS5hbGlhcztpZihoJiYhdS5wYXR0ZXJuLmdsb2JhbCl7dmFyIHA9dS5wYXR0ZXJuLnRvU3RyaW5nKCkubWF0Y2goL1tpbXV5XSokLylbMF07dS5wYXR0ZXJuPVJlZ0V4cCh1LnBhdHRlcm4uc291cmNlLHArXCJnXCIpfXU9dS5wYXR0ZXJufHx1O2Zvcih2YXIgbT0wLHk9MDttPHIubGVuZ3RoO3krPXJbbV0ubGVuZ3RoLCsrbSl7dmFyIHY9clttXTtpZihyLmxlbmd0aD5lLmxlbmd0aClicmVhayBlO2lmKCEodiBpbnN0YW5jZW9mIGEpKXt1Lmxhc3RJbmRleD0wO3ZhciBiPXUuZXhlYyh2KSxrPTE7aWYoIWImJmgmJm0hPXIubGVuZ3RoLTEpe2lmKHUubGFzdEluZGV4PXksYj11LmV4ZWMoZSksIWIpYnJlYWs7Zm9yKHZhciB3PWIuaW5kZXgrKGM/YlsxXS5sZW5ndGg6MCksXz1iLmluZGV4K2JbMF0ubGVuZ3RoLEE9bSxQPXksaj1yLmxlbmd0aDtqPkEmJl8+UDsrK0EpUCs9cltBXS5sZW5ndGgsdz49UCYmKCsrbSx5PVApO2lmKHJbbV1pbnN0YW5jZW9mIGF8fHJbQS0xXS5ncmVlZHkpY29udGludWU7az1BLW0sdj1lLnNsaWNlKHksUCksYi5pbmRleC09eX1pZihiKXtjJiYoZj1iWzFdLmxlbmd0aCk7dmFyIHc9Yi5pbmRleCtmLGI9YlswXS5zbGljZShmKSxfPXcrYi5sZW5ndGgseD12LnNsaWNlKDAsdyksTz12LnNsaWNlKF8pLFM9W20sa107eCYmUy5wdXNoKHgpO3ZhciBOPW5ldyBhKGwsZz9uLnRva2VuaXplKGIsZyk6YixkLGIsaCk7Uy5wdXNoKE4pLE8mJlMucHVzaChPKSxBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KHIsUyl9fX19fXJldHVybiByfSxob29rczp7YWxsOnt9LGFkZDpmdW5jdGlvbihlLHQpe3ZhciBhPW4uaG9va3MuYWxsO2FbZV09YVtlXXx8W10sYVtlXS5wdXNoKHQpfSxydW46ZnVuY3Rpb24oZSx0KXt2YXIgYT1uLmhvb2tzLmFsbFtlXTtpZihhJiZhLmxlbmd0aClmb3IodmFyIHIsaT0wO3I9YVtpKytdOylyKHQpfX19LGE9bi5Ub2tlbj1mdW5jdGlvbihlLHQsbixhLHIpe3RoaXMudHlwZT1lLHRoaXMuY29udGVudD10LHRoaXMuYWxpYXM9bix0aGlzLmxlbmd0aD0wfChhfHxcIlwiKS5sZW5ndGgsdGhpcy5ncmVlZHk9ISFyfTtpZihhLnN0cmluZ2lmeT1mdW5jdGlvbihlLHQscil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIGU7aWYoXCJBcnJheVwiPT09bi51dGlsLnR5cGUoZSkpcmV0dXJuIGUubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBhLnN0cmluZ2lmeShuLHQsZSl9KS5qb2luKFwiXCIpO3ZhciBpPXt0eXBlOmUudHlwZSxjb250ZW50OmEuc3RyaW5naWZ5KGUuY29udGVudCx0LHIpLHRhZzpcInNwYW5cIixjbGFzc2VzOltcInRva2VuXCIsZS50eXBlXSxhdHRyaWJ1dGVzOnt9LGxhbmd1YWdlOnQscGFyZW50OnJ9O2lmKFwiY29tbWVudFwiPT1pLnR5cGUmJihpLmF0dHJpYnV0ZXMuc3BlbGxjaGVjaz1cInRydWVcIiksZS5hbGlhcyl7dmFyIGw9XCJBcnJheVwiPT09bi51dGlsLnR5cGUoZS5hbGlhcyk/ZS5hbGlhczpbZS5hbGlhc107QXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoaS5jbGFzc2VzLGwpfW4uaG9va3MucnVuKFwid3JhcFwiLGkpO3ZhciBvPU9iamVjdC5rZXlzKGkuYXR0cmlidXRlcykubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlKyc9XCInKyhpLmF0dHJpYnV0ZXNbZV18fFwiXCIpLnJlcGxhY2UoL1wiL2csXCImcXVvdDtcIikrJ1wiJ30pLmpvaW4oXCIgXCIpO3JldHVyblwiPFwiK2kudGFnKycgY2xhc3M9XCInK2kuY2xhc3Nlcy5qb2luKFwiIFwiKSsnXCInKyhvP1wiIFwiK286XCJcIikrXCI+XCIraS5jb250ZW50K1wiPC9cIitpLnRhZytcIj5cIn0sIV9zZWxmLmRvY3VtZW50KXJldHVybiBfc2VsZi5hZGRFdmVudExpc3RlbmVyPyhfc2VsZi5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGUpe3ZhciB0PUpTT04ucGFyc2UoZS5kYXRhKSxhPXQubGFuZ3VhZ2Uscj10LmNvZGUsaT10LmltbWVkaWF0ZUNsb3NlO19zZWxmLnBvc3RNZXNzYWdlKG4uaGlnaGxpZ2h0KHIsbi5sYW5ndWFnZXNbYV0sYSkpLGkmJl9zZWxmLmNsb3NlKCl9LCExKSxfc2VsZi5QcmlzbSk6X3NlbGYuUHJpc207dmFyIHI9ZG9jdW1lbnQuY3VycmVudFNjcmlwdHx8W10uc2xpY2UuY2FsbChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKSkucG9wKCk7cmV0dXJuIHImJihuLmZpbGVuYW1lPXIuc3JjLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXImJiFyLmhhc0F0dHJpYnV0ZShcImRhdGEtbWFudWFsXCIpJiYoXCJsb2FkaW5nXCIhPT1kb2N1bWVudC5yZWFkeVN0YXRlP3dpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU/d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShuLmhpZ2hsaWdodEFsbCk6d2luZG93LnNldFRpbWVvdXQobi5oaWdobGlnaHRBbGwsMTYpOmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsbi5oaWdobGlnaHRBbGwpKSksX3NlbGYuUHJpc219KCk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMmJihtb2R1bGUuZXhwb3J0cz1QcmlzbSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbCYmKGdsb2JhbC5QcmlzbT1QcmlzbSk7XG5QcmlzbS5sYW5ndWFnZXMubWFya3VwPXtjb21tZW50Oi88IS0tW1xcd1xcV10qPy0tPi8scHJvbG9nOi88XFw/W1xcd1xcV10rP1xcPz4vLGRvY3R5cGU6LzwhRE9DVFlQRVtcXHdcXFddKz8+L2ksY2RhdGE6LzwhXFxbQ0RBVEFcXFtbXFx3XFxXXSo/XV0+L2ksdGFnOntwYXR0ZXJuOi88XFwvPyg/IVxcZClbXlxccz5cXC89JDxdKyg/OlxccytbXlxccz5cXC89XSsoPzo9KD86KFwifCcpKD86XFxcXFxcMXxcXFxcPyg/IVxcMSlbXFx3XFxXXSkqXFwxfFteXFxzJ1wiPj1dKykpPykqXFxzKlxcLz8+L2ksaW5zaWRlOnt0YWc6e3BhdHRlcm46L148XFwvP1teXFxzPlxcL10rL2ksaW5zaWRlOntwdW5jdHVhdGlvbjovXjxcXC8/LyxuYW1lc3BhY2U6L15bXlxccz5cXC86XSs6L319LFwiYXR0ci12YWx1ZVwiOntwYXR0ZXJuOi89KD86KCd8XCIpW1xcd1xcV10qPyhcXDEpfFteXFxzPl0rKS9pLGluc2lkZTp7cHVuY3R1YXRpb246L1s9PlwiJ10vfX0scHVuY3R1YXRpb246L1xcLz8+LyxcImF0dHItbmFtZVwiOntwYXR0ZXJuOi9bXlxccz5cXC9dKy8saW5zaWRlOntuYW1lc3BhY2U6L15bXlxccz5cXC86XSs6L319fX0sZW50aXR5Oi8mIz9bXFxkYS16XXsxLDh9Oy9pfSxQcmlzbS5ob29rcy5hZGQoXCJ3cmFwXCIsZnVuY3Rpb24oYSl7XCJlbnRpdHlcIj09PWEudHlwZSYmKGEuYXR0cmlidXRlcy50aXRsZT1hLmNvbnRlbnQucmVwbGFjZSgvJmFtcDsvLFwiJlwiKSl9KSxQcmlzbS5sYW5ndWFnZXMueG1sPVByaXNtLmxhbmd1YWdlcy5tYXJrdXAsUHJpc20ubGFuZ3VhZ2VzLmh0bWw9UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCxQcmlzbS5sYW5ndWFnZXMubWF0aG1sPVByaXNtLmxhbmd1YWdlcy5tYXJrdXAsUHJpc20ubGFuZ3VhZ2VzLnN2Zz1QcmlzbS5sYW5ndWFnZXMubWFya3VwO1xuUHJpc20ubGFuZ3VhZ2VzLmNzcz17Y29tbWVudDovXFwvXFwqW1xcd1xcV10qP1xcKlxcLy8sYXRydWxlOntwYXR0ZXJuOi9AW1xcdy1dKz8uKj8oO3woPz1cXHMqXFx7KSkvaSxpbnNpZGU6e3J1bGU6L0BbXFx3LV0rL319LHVybDovdXJsXFwoKD86KFtcIiddKShcXFxcKD86XFxyXFxufFtcXHdcXFddKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxfC4qPylcXCkvaSxzZWxlY3RvcjovW15cXHtcXH1cXHNdW15cXHtcXH07XSo/KD89XFxzKlxceykvLHN0cmluZzp7cGF0dGVybjovKFwifCcpKFxcXFwoPzpcXHJcXG58W1xcd1xcV10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLGdyZWVkeTohMH0scHJvcGVydHk6LyhcXGJ8XFxCKVtcXHctXSsoPz1cXHMqOikvaSxpbXBvcnRhbnQ6L1xcQiFpbXBvcnRhbnRcXGIvaSxcImZ1bmN0aW9uXCI6L1stYS16MC05XSsoPz1cXCgpL2kscHVuY3R1YXRpb246L1soKXt9OzpdL30sUHJpc20ubGFuZ3VhZ2VzLmNzcy5hdHJ1bGUuaW5zaWRlLnJlc3Q9UHJpc20udXRpbC5jbG9uZShQcmlzbS5sYW5ndWFnZXMuY3NzKSxQcmlzbS5sYW5ndWFnZXMubWFya3VwJiYoUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcIm1hcmt1cFwiLFwidGFnXCIse3N0eWxlOntwYXR0ZXJuOi8oPHN0eWxlW1xcd1xcV10qPz4pW1xcd1xcV10qPyg/PTxcXC9zdHlsZT4pL2ksbG9va2JlaGluZDohMCxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzLmNzcyxhbGlhczpcImxhbmd1YWdlLWNzc1wifX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJpbnNpZGVcIixcImF0dHItdmFsdWVcIix7XCJzdHlsZS1hdHRyXCI6e3BhdHRlcm46L1xccypzdHlsZT0oXCJ8JykuKj9cXDEvaSxpbnNpZGU6e1wiYXR0ci1uYW1lXCI6e3BhdHRlcm46L15cXHMqc3R5bGUvaSxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcuaW5zaWRlfSxwdW5jdHVhdGlvbjovXlxccyo9XFxzKlsnXCJdfFsnXCJdXFxzKiQvLFwiYXR0ci12YWx1ZVwiOntwYXR0ZXJuOi8uKy9pLGluc2lkZTpQcmlzbS5sYW5ndWFnZXMuY3NzfX0sYWxpYXM6XCJsYW5ndWFnZS1jc3NcIn19LFByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnKSk7XG5QcmlzbS5sYW5ndWFnZXMuY2xpa2U9e2NvbW1lbnQ6W3twYXR0ZXJuOi8oXnxbXlxcXFxdKVxcL1xcKltcXHdcXFddKj9cXCpcXC8vLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sbG9va2JlaGluZDohMH1dLHN0cmluZzp7cGF0dGVybjovKFtcIiddKShcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxncmVlZHk6ITB9LFwiY2xhc3MtbmFtZVwiOntwYXR0ZXJuOi8oKD86XFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3x0cmFpdHxpbnN0YW5jZW9mfG5ldylcXHMrKXwoPzpjYXRjaFxccytcXCgpKVthLXowLTlfXFwuXFxcXF0rL2ksbG9va2JlaGluZDohMCxpbnNpZGU6e3B1bmN0dWF0aW9uOi8oXFwufFxcXFwpL319LGtleXdvcmQ6L1xcYihpZnxlbHNlfHdoaWxlfGRvfGZvcnxyZXR1cm58aW58aW5zdGFuY2VvZnxmdW5jdGlvbnxuZXd8dHJ5fHRocm93fGNhdGNofGZpbmFsbHl8bnVsbHxicmVha3xjb250aW51ZSlcXGIvLFwiYm9vbGVhblwiOi9cXGIodHJ1ZXxmYWxzZSlcXGIvLFwiZnVuY3Rpb25cIjovW2EtejAtOV9dKyg/PVxcKCkvaSxudW1iZXI6L1xcYi0/KD86MHhbXFxkYS1mXSt8XFxkKlxcLj9cXGQrKD86ZVsrLV0/XFxkKyk/KVxcYi9pLG9wZXJhdG9yOi8tLT98XFwrXFwrP3whPT89P3w8PT98Pj0/fD09Pz0/fCYmP3xcXHxcXHw/fFxcP3xcXCp8XFwvfH58XFxefCUvLHB1bmN0dWF0aW9uOi9be31bXFxdOygpLC46XS99O1xuUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQ9UHJpc20ubGFuZ3VhZ2VzLmV4dGVuZChcImNsaWtlXCIse2tleXdvcmQ6L1xcYihhc3xhc3luY3xhd2FpdHxicmVha3xjYXNlfGNhdGNofGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlYnVnZ2VyfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xmaW5hbGx5fGZvcnxmcm9tfGZ1bmN0aW9ufGdldHxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbnN0YW5jZW9mfGludGVyZmFjZXxsZXR8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmV0dXJufHNldHxzdGF0aWN8c3VwZXJ8c3dpdGNofHRoaXN8dGhyb3d8dHJ5fHR5cGVvZnx2YXJ8dm9pZHx3aGlsZXx3aXRofHlpZWxkKVxcYi8sbnVtYmVyOi9cXGItPygweFtcXGRBLUZhLWZdK3wwYlswMV0rfDBvWzAtN10rfFxcZCpcXC4/XFxkKyhbRWVdWystXT9cXGQrKT98TmFOfEluZmluaXR5KVxcYi8sXCJmdW5jdGlvblwiOi9bXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVtfJGEtekEtWjAtOVxceEEwLVxcdUZGRkZdKig/PVxcKCkvaSxvcGVyYXRvcjovLS0/fFxcK1xcKz98IT0/PT98PD0/fD49P3w9PT89P3wmJj98XFx8XFx8P3xcXD98XFwqXFwqP3xcXC98fnxcXF58JXxcXC57M30vfSksUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcImphdmFzY3JpcHRcIixcImtleXdvcmRcIix7cmVnZXg6e3BhdHRlcm46LyhefFteXFwvXSlcXC8oPyFcXC8pKFxcWy4rP118XFxcXC58W15cXC9cXFxcXFxyXFxuXSkrXFwvW2dpbXl1XXswLDV9KD89XFxzKigkfFtcXHJcXG4sLjt9KV0pKS8sbG9va2JlaGluZDohMCxncmVlZHk6ITB9fSksUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcImphdmFzY3JpcHRcIixcInN0cmluZ1wiLHtcInRlbXBsYXRlLXN0cmluZ1wiOntwYXR0ZXJuOi9gKD86XFxcXFxcXFx8XFxcXD9bXlxcXFxdKSo/YC8sZ3JlZWR5OiEwLGluc2lkZTp7aW50ZXJwb2xhdGlvbjp7cGF0dGVybjovXFwkXFx7W159XStcXH0vLGluc2lkZTp7XCJpbnRlcnBvbGF0aW9uLXB1bmN0dWF0aW9uXCI6e3BhdHRlcm46L15cXCRcXHt8XFx9JC8sYWxpYXM6XCJwdW5jdHVhdGlvblwifSxyZXN0OlByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0fX0sc3RyaW5nOi9bXFxzXFxTXSsvfX19KSxQcmlzbS5sYW5ndWFnZXMubWFya3VwJiZQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwibWFya3VwXCIsXCJ0YWdcIix7c2NyaXB0OntwYXR0ZXJuOi8oPHNjcmlwdFtcXHdcXFddKj8+KVtcXHdcXFddKj8oPz08XFwvc2NyaXB0PikvaSxsb29rYmVoaW5kOiEwLGluc2lkZTpQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCxhbGlhczpcImxhbmd1YWdlLWphdmFzY3JpcHRcIn19KSxQcmlzbS5sYW5ndWFnZXMuanM9UHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQ7XG5QcmlzbS5sYW5ndWFnZXMuY3NzLnNlbGVjdG9yPXtwYXR0ZXJuOi9bXlxce1xcfVxcc11bXlxce1xcfV0qKD89XFxzKlxceykvLGluc2lkZTp7XCJwc2V1ZG8tZWxlbWVudFwiOi86KD86YWZ0ZXJ8YmVmb3JlfGZpcnN0LWxldHRlcnxmaXJzdC1saW5lfHNlbGVjdGlvbil8OjpbLVxcd10rLyxcInBzZXVkby1jbGFzc1wiOi86Wy1cXHddKyg/OlxcKC4qXFwpKT8vLFwiY2xhc3NcIjovXFwuWy06XFwuXFx3XSsvLGlkOi8jWy06XFwuXFx3XSsvLGF0dHJpYnV0ZTovXFxbW15cXF1dK1xcXS99fSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiY3NzXCIsXCJmdW5jdGlvblwiLHtoZXhjb2RlOi8jW1xcZGEtZl17Myw2fS9pLGVudGl0eTovXFxcXFtcXGRhLWZdezEsOH0vaSxudW1iZXI6L1tcXGQlXFwuXSsvfSk7XG5QcmlzbS5sYW5ndWFnZXMuanNvbj17cHJvcGVydHk6L1wiKD86XFxcXC58W158XCJdKSpcIig/PVxccyo6KS9naSxzdHJpbmc6L1wiKD8hOikoPzpcXFxcLnxbXnxcIl0pKlwiKD8hOikvZyxudW1iZXI6L1xcYi0/KDB4W1xcZEEtRmEtZl0rfFxcZCpcXC4/XFxkKyhbRWVdWystXT9cXGQrKT8pXFxiL2cscHVuY3R1YXRpb246L1t7fVtcXF0pOyxdL2csb3BlcmF0b3I6LzovZyxcImJvb2xlYW5cIjovXFxiKHRydWV8ZmFsc2UpXFxiL2dpLFwibnVsbFwiOi9cXGJudWxsXFxiL2dpfSxQcmlzbS5sYW5ndWFnZXMuanNvbnA9UHJpc20ubGFuZ3VhZ2VzLmpzb247XG5QcmlzbS5sYW5ndWFnZXMucGhwPVByaXNtLmxhbmd1YWdlcy5leHRlbmQoXCJjbGlrZVwiLHtrZXl3b3JkOi9cXGIoYW5kfG9yfHhvcnxhcnJheXxhc3xicmVha3xjYXNlfGNmdW5jdGlvbnxjbGFzc3xjb25zdHxjb250aW51ZXxkZWNsYXJlfGRlZmF1bHR8ZGllfGRvfGVsc2V8ZWxzZWlmfGVuZGRlY2xhcmV8ZW5kZm9yfGVuZGZvcmVhY2h8ZW5kaWZ8ZW5kc3dpdGNofGVuZHdoaWxlfGV4dGVuZHN8Zm9yfGZvcmVhY2h8ZnVuY3Rpb258aW5jbHVkZXxpbmNsdWRlX29uY2V8Z2xvYmFsfGlmfG5ld3xyZXR1cm58c3RhdGljfHN3aXRjaHx1c2V8cmVxdWlyZXxyZXF1aXJlX29uY2V8dmFyfHdoaWxlfGFic3RyYWN0fGludGVyZmFjZXxwdWJsaWN8aW1wbGVtZW50c3xwcml2YXRlfHByb3RlY3RlZHxwYXJlbnR8dGhyb3d8bnVsbHxlY2hvfHByaW50fHRyYWl0fG5hbWVzcGFjZXxmaW5hbHx5aWVsZHxnb3RvfGluc3RhbmNlb2Z8ZmluYWxseXx0cnl8Y2F0Y2gpXFxiL2ksY29uc3RhbnQ6L1xcYltBLVowLTlfXXsyLH1cXGIvLGNvbW1lbnQ6e3BhdHRlcm46LyhefFteXFxcXF0pKD86XFwvXFwqW1xcd1xcV10qP1xcKlxcL3xcXC9cXC8uKikvLGxvb2tiZWhpbmQ6ITAsZ3JlZWR5OiEwfX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJwaHBcIixcImNsYXNzLW5hbWVcIix7XCJzaGVsbC1jb21tZW50XCI6e3BhdHRlcm46LyhefFteXFxcXF0pIy4qLyxsb29rYmVoaW5kOiEwLGFsaWFzOlwiY29tbWVudFwifX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJwaHBcIixcImtleXdvcmRcIix7ZGVsaW1pdGVyOi9cXD8+fDxcXD8oPzpwaHApPy9pLHZhcmlhYmxlOi9cXCRcXHcrXFxiL2ksXCJwYWNrYWdlXCI6e3BhdHRlcm46LyhcXFxcfG5hbWVzcGFjZVxccyt8dXNlXFxzKylbXFx3XFxcXF0rLyxsb29rYmVoaW5kOiEwLGluc2lkZTp7cHVuY3R1YXRpb246L1xcXFwvfX19KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwicGhwXCIsXCJvcGVyYXRvclwiLHtwcm9wZXJ0eTp7cGF0dGVybjovKC0+KVtcXHddKy8sbG9va2JlaGluZDohMH19KSxQcmlzbS5sYW5ndWFnZXMubWFya3VwJiYoUHJpc20uaG9va3MuYWRkKFwiYmVmb3JlLWhpZ2hsaWdodFwiLGZ1bmN0aW9uKGUpe1wicGhwXCI9PT1lLmxhbmd1YWdlJiYoZS50b2tlblN0YWNrPVtdLGUuYmFja3VwQ29kZT1lLmNvZGUsZS5jb2RlPWUuY29kZS5yZXBsYWNlKC8oPzo8XFw/cGhwfDxcXD8pW1xcd1xcV10qPyg/OlxcPz4pL2dpLGZ1bmN0aW9uKGEpe3JldHVybiBlLnRva2VuU3RhY2sucHVzaChhKSxcInt7e1BIUFwiK2UudG9rZW5TdGFjay5sZW5ndGgrXCJ9fX1cIn0pKX0pLFByaXNtLmhvb2tzLmFkZChcImJlZm9yZS1pbnNlcnRcIixmdW5jdGlvbihlKXtcInBocFwiPT09ZS5sYW5ndWFnZSYmKGUuY29kZT1lLmJhY2t1cENvZGUsZGVsZXRlIGUuYmFja3VwQ29kZSl9KSxQcmlzbS5ob29rcy5hZGQoXCJhZnRlci1oaWdobGlnaHRcIixmdW5jdGlvbihlKXtpZihcInBocFwiPT09ZS5sYW5ndWFnZSl7Zm9yKHZhciBhLG49MDthPWUudG9rZW5TdGFja1tuXTtuKyspZS5oaWdobGlnaHRlZENvZGU9ZS5oaWdobGlnaHRlZENvZGUucmVwbGFjZShcInt7e1BIUFwiKyhuKzEpK1wifX19XCIsUHJpc20uaGlnaGxpZ2h0KGEsZS5ncmFtbWFyLFwicGhwXCIpLnJlcGxhY2UoL1xcJC9nLFwiJCQkJFwiKSk7ZS5lbGVtZW50LmlubmVySFRNTD1lLmhpZ2hsaWdodGVkQ29kZX19KSxQcmlzbS5ob29rcy5hZGQoXCJ3cmFwXCIsZnVuY3Rpb24oZSl7XCJwaHBcIj09PWUubGFuZ3VhZ2UmJlwibWFya3VwXCI9PT1lLnR5cGUmJihlLmNvbnRlbnQ9ZS5jb250ZW50LnJlcGxhY2UoLyhcXHtcXHtcXHtQSFBbMC05XStcXH1cXH1cXH0pL2csJzxzcGFuIGNsYXNzPVwidG9rZW4gcGhwXCI+JDE8L3NwYW4+JykpfSksUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcInBocFwiLFwiY29tbWVudFwiLHttYXJrdXA6e3BhdHRlcm46LzxbXj9dXFwvPyguKj8pPi8saW5zaWRlOlByaXNtLmxhbmd1YWdlcy5tYXJrdXB9LHBocDovXFx7XFx7XFx7UEhQWzAtOV0rXFx9XFx9XFx9L30pKTtcblByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJwaHBcIixcInZhcmlhYmxlXCIse1widGhpc1wiOi9cXCR0aGlzXFxiLyxnbG9iYWw6L1xcJCg/Ol8oPzpTRVJWRVJ8R0VUfFBPU1R8RklMRVN8UkVRVUVTVHxTRVNTSU9OfEVOVnxDT09LSUUpfEdMT0JBTFN8SFRUUF9SQVdfUE9TVF9EQVRBfGFyZ2N8YXJndnxwaHBfZXJyb3Jtc2d8aHR0cF9yZXNwb25zZV9oZWFkZXIpLyxzY29wZTp7cGF0dGVybjovXFxiW1xcd1xcXFxdKzo6LyxpbnNpZGU6e2tleXdvcmQ6LyhzdGF0aWN8c2VsZnxwYXJlbnQpLyxwdW5jdHVhdGlvbjovKDo6fFxcXFwpL319fSk7XG4hZnVuY3Rpb24oZSl7ZS5sYW5ndWFnZXMuc2Fzcz1lLmxhbmd1YWdlcy5leHRlbmQoXCJjc3NcIix7Y29tbWVudDp7cGF0dGVybjovXihbIFxcdF0qKVxcL1tcXC8qXS4qKD86KD86XFxyP1xcbnxcXHIpXFwxWyBcXHRdKy4rKSovbSxsb29rYmVoaW5kOiEwfX0pLGUubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcInNhc3NcIixcImF0cnVsZVwiLHtcImF0cnVsZS1saW5lXCI6e3BhdHRlcm46L14oPzpbIFxcdF0qKVtAKz1dLisvbSxpbnNpZGU6e2F0cnVsZTovKD86QFtcXHctXSt8Wys9XSkvbX19fSksZGVsZXRlIGUubGFuZ3VhZ2VzLnNhc3MuYXRydWxlO3ZhciBhPS8oKFxcJFstX1xcd10rKXwoI1xce1xcJFstX1xcd10rXFx9KSkvaSx0PVsvWysqXFwvJV18Wz0hXT18PD0/fD49P3xcXGIoPzphbmR8b3J8bm90KVxcYi8se3BhdHRlcm46LyhcXHMrKS0oPz1cXHMpLyxsb29rYmVoaW5kOiEwfV07ZS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwic2Fzc1wiLFwicHJvcGVydHlcIix7XCJ2YXJpYWJsZS1saW5lXCI6e3BhdHRlcm46L15bIFxcdF0qXFwkLisvbSxpbnNpZGU6e3B1bmN0dWF0aW9uOi86Lyx2YXJpYWJsZTphLG9wZXJhdG9yOnR9fSxcInByb3BlcnR5LWxpbmVcIjp7cGF0dGVybjovXlsgXFx0XSooPzpbXjpcXHNdKyAqOi4qfDpbXjpcXHNdKy4qKS9tLGluc2lkZTp7cHJvcGVydHk6Wy9bXjpcXHNdKyg/PVxccyo6KS8se3BhdHRlcm46Lyg6KVteOlxcc10rLyxsb29rYmVoaW5kOiEwfV0scHVuY3R1YXRpb246LzovLHZhcmlhYmxlOmEsb3BlcmF0b3I6dCxpbXBvcnRhbnQ6ZS5sYW5ndWFnZXMuc2Fzcy5pbXBvcnRhbnR9fX0pLGRlbGV0ZSBlLmxhbmd1YWdlcy5zYXNzLnByb3BlcnR5LGRlbGV0ZSBlLmxhbmd1YWdlcy5zYXNzLmltcG9ydGFudCxkZWxldGUgZS5sYW5ndWFnZXMuc2Fzcy5zZWxlY3RvcixlLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJzYXNzXCIsXCJwdW5jdHVhdGlvblwiLHtzZWxlY3Rvcjp7cGF0dGVybjovKFsgXFx0XSopXFxTKD86LD9bXixcXHJcXG5dKykqKD86LCg/Olxccj9cXG58XFxyKVxcMVsgXFx0XStcXFMoPzosP1teLFxcclxcbl0rKSopKi8sbG9va2JlaGluZDohMH19KX0oUHJpc20pO1xuUHJpc20ubGFuZ3VhZ2VzLnNjc3M9UHJpc20ubGFuZ3VhZ2VzLmV4dGVuZChcImNzc1wiLHtjb21tZW50OntwYXR0ZXJuOi8oXnxbXlxcXFxdKSg/OlxcL1xcKltcXHdcXFddKj9cXCpcXC98XFwvXFwvLiopLyxsb29rYmVoaW5kOiEwfSxhdHJ1bGU6e3BhdHRlcm46L0BbXFx3LV0rKD86XFwoW14oKV0rXFwpfFteKF0pKj8oPz1cXHMrW3s7XSkvLGluc2lkZTp7cnVsZTovQFtcXHctXSsvfX0sdXJsOi8oPzpbLWEtel0rLSkqdXJsKD89XFwoKS9pLHNlbGVjdG9yOntwYXR0ZXJuOi8oPz1cXFMpW15AO1xce1xcfVxcKFxcKV0/KFteQDtcXHtcXH1cXChcXCldfCZ8I1xce1xcJFstX1xcd10rXFx9KSsoPz1cXHMqXFx7KFxcfXxcXHN8W15cXH1dKyg6fFxceylbXlxcfV0rKSkvbSxpbnNpZGU6e3BhcmVudDp7cGF0dGVybjovJi8sYWxpYXM6XCJpbXBvcnRhbnRcIn0scGxhY2Vob2xkZXI6LyVbLV9cXHddKy8sdmFyaWFibGU6L1xcJFstX1xcd10rfCNcXHtcXCRbLV9cXHddK1xcfS99fX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJzY3NzXCIsXCJhdHJ1bGVcIix7a2V5d29yZDpbL0AoPzppZnxlbHNlKD86IGlmKT98Zm9yfGVhY2h8d2hpbGV8aW1wb3J0fGV4dGVuZHxkZWJ1Z3x3YXJufG1peGlufGluY2x1ZGV8ZnVuY3Rpb258cmV0dXJufGNvbnRlbnQpL2kse3BhdHRlcm46LyggKykoPzpmcm9tfHRocm91Z2gpKD89ICkvLGxvb2tiZWhpbmQ6ITB9XX0pLFByaXNtLmxhbmd1YWdlcy5zY3NzLnByb3BlcnR5PXtwYXR0ZXJuOi8oPzpbXFx3LV18XFwkWy1fXFx3XSt8I1xce1xcJFstX1xcd10rXFx9KSsoPz1cXHMqOikvaSxpbnNpZGU6e3ZhcmlhYmxlOi9cXCRbLV9cXHddK3wjXFx7XFwkWy1fXFx3XStcXH0vfX0sUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcInNjc3NcIixcImltcG9ydGFudFwiLHt2YXJpYWJsZTovXFwkWy1fXFx3XSt8I1xce1xcJFstX1xcd10rXFx9L30pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJzY3NzXCIsXCJmdW5jdGlvblwiLHtwbGFjZWhvbGRlcjp7cGF0dGVybjovJVstX1xcd10rLyxhbGlhczpcInNlbGVjdG9yXCJ9LHN0YXRlbWVudDp7cGF0dGVybjovXFxCISg/OmRlZmF1bHR8b3B0aW9uYWwpXFxiL2ksYWxpYXM6XCJrZXl3b3JkXCJ9LFwiYm9vbGVhblwiOi9cXGIoPzp0cnVlfGZhbHNlKVxcYi8sXCJudWxsXCI6L1xcYm51bGxcXGIvLG9wZXJhdG9yOntwYXR0ZXJuOi8oXFxzKSg/OlstKypcXC8lXXxbPSFdPXw8PT98Pj0/fGFuZHxvcnxub3QpKD89XFxzKS8sbG9va2JlaGluZDohMH19KSxQcmlzbS5sYW5ndWFnZXMuc2Nzcy5hdHJ1bGUuaW5zaWRlLnJlc3Q9UHJpc20udXRpbC5jbG9uZShQcmlzbS5sYW5ndWFnZXMuc2Nzcyk7XG4iLCIvKipcbiAqIEZpbGUgc2tpcC1saW5rLWZvY3VzLWZpeC5qcy5cbiAqXG4gKiBIZWxwcyB3aXRoIGFjY2Vzc2liaWxpdHkgZm9yIGtleWJvYXJkIG9ubHkgdXNlcnMuXG4gKlxuICogTGVhcm4gbW9yZTogaHR0cHM6Ly9naXQuaW8vdldkcjJcbiAqL1xuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlzV2Via2l0ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoICd3ZWJraXQnICkgPiAtMSxcblx0ICAgIGlzT3BlcmEgID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoICdvcGVyYScgKSAgPiAtMSxcblx0ICAgIGlzSWUgICAgID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoICdtc2llJyApICAgPiAtMTtcblxuXHRpZiAoICggaXNXZWJraXQgfHwgaXNPcGVyYSB8fCBpc0llICkgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdoYXNoY2hhbmdlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaWQgPSBsb2NhdGlvbi5oYXNoLnN1YnN0cmluZyggMSApLFxuXHRcdFx0XHRlbGVtZW50O1xuXG5cdFx0XHRpZiAoICEgKCAvXltBLXowLTlfLV0rJC8udGVzdCggaWQgKSApICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0aWYgKCBlbGVtZW50ICkge1xuXHRcdFx0XHRpZiAoICEgKCAvXig/OmF8c2VsZWN0fGlucHV0fGJ1dHRvbnx0ZXh0YXJlYSkkL2kudGVzdCggZWxlbWVudC50YWdOYW1lICkgKSApIHtcblx0XHRcdFx0XHRlbGVtZW50LnRhYkluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtZW50LmZvY3VzKCk7XG5cdFx0XHR9XG5cdFx0fSwgZmFsc2UgKTtcblx0fVxufSkoKTsiLCIvKipcbiAqIEZpbGUgd2luZG93LXJlYWR5LmpzXG4gKlxuICogQWRkIGEgXCJyZWFkeVwiIGNsYXNzIHRvIDxib2R5PiB3aGVuIHdpbmRvdyBpcyByZWFkeS5cbiAqL1xud2luZG93LldpbmRvd19SZWFkeSA9IHt9O1xuKCBmdW5jdGlvbiggd2luZG93LCAkLCB0aGF0ICkge1xuXG5cdC8vIENvbnN0cnVjdG9yLlxuXHR0aGF0LmluaXQgPSBmdW5jdGlvbigpIHtcblx0XHR0aGF0LmNhY2hlKCk7XG5cdFx0dGhhdC5iaW5kRXZlbnRzKCk7XG5cdH07XG5cblx0Ly8gQ2FjaGUgZG9jdW1lbnQgZWxlbWVudHMuXG5cdHRoYXQuY2FjaGUgPSBmdW5jdGlvbigpIHtcblx0XHR0aGF0LiRjID0ge1xuXHRcdFx0d2luZG93OiAkKHdpbmRvdyksXG5cdFx0XHRib2R5OiAkKGRvY3VtZW50LmJvZHkpLFxuXHRcdH07XG5cdH07XG5cblx0Ly8gQ29tYmluZSBhbGwgZXZlbnRzLlxuXHR0aGF0LmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcblx0XHR0aGF0LiRjLndpbmRvdy5sb2FkKCB0aGF0LmFkZEJvZHlDbGFzcyApO1xuXHR9O1xuXG5cdC8vIEFkZCBhIGNsYXNzIHRvIDxib2R5Pi5cblx0dGhhdC5hZGRCb2R5Q2xhc3MgPSBmdW5jdGlvbigpIHtcblx0XHR0aGF0LiRjLmJvZHkuYWRkQ2xhc3MoICdyZWFkeScgKTtcblx0fTtcblxuXHQvLyBFbmdhZ2UhXG5cdCQoIHRoYXQuaW5pdCApO1xuXG59KSggd2luZG93LCBqUXVlcnksIHdpbmRvdy5XaW5kb3dfUmVhZHkgKTsiXX0=
