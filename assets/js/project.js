'use strict';

/**
 * File js-enabled.js
 *
 * If Javascript is enabled, replace the <body> class "no-js".
 */
document.body.className = document.body.className.replace('no-js', 'js');
'use strict';

// Variables.
var r;
var g;
var b;
var a;

var canvas;
var orbs = [];
var orbAmount = 42;

// Speeds.
var speedMin = -6;
var speedMax = 6;

var timer;

// Setup.
function setup() {
	canvas = createCanvas(windowWidth, 400);
	canvas.parent('heroine');
	canvas.position(0, 0);
	canvas.style('z-index', '-1');

	for (var i = 0; i < orbAmount; i++) {
		orbs[i] = new Orb();
	}
}

// Draw.
function draw() {
	background(42, 27, 61);

	for (var i = 0; i < orbs.length; i++) {
		orbs[i].display();
		orbs[i].update();
		orbs[i].edges();
	}
}

function startTimer() {
	timer = setInterval(fadeOut, 800);
}

function fadeOut() {
	// Nix oldest orb in array as long as there's more than original amount.
	if (orbs.length > orbAmount) {
		orbs.splice(0, 1);
	} else {
		clearInterval(timer);
	}
}

// Add orbs on mouse drag.
function mouseDragged() {
	orbs.push(new Orb(mouseX, mouseY));
}

// Start timer on mouse press.
function mousePressed() {
	startTimer();
}

// *THE ORB * //
function Orb() {
	var mouseX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	var mouseY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

	// Radius.
	var radius = random(8, 24);

	// Colour Variables.
	this.r = random(145, 255);
	this.g = random(0, 150);
	this.b = random(200, 255);
	this.a = random(0, 100);

	// Set position of bubble creation for mouse position but starting bubbles will be randomly positioned.
	if (mouseX && mouseY) {
		this.position = createVector(mouseX, mouseY);
	} else {
		this.position = createVector(random(0 + 20, width - 20), random(0 + 20, height - 20));
	};

	// Start w/ random initial velocities.
	this.velocity = createVector(random(speedMin, speedMax) / (radius / 1.2), random(speedMin, speedMax) / (radius / 1.2));

	// Coordinates to move towards.
	var coordinate = createVector(random(0, width), random(0, height));

	this.update = function () {
		this.acceleration = p5.Vector.sub(coordinate, this.position);
		this.acceleration.setMag(this.radius);
		this.velocity.add(this.acceleration);
		this.position.add(this.velocity);
	};

	this.display = function () {
		noStroke();
		fill(this.r, this.g, this.b, this.a);
		ellipse(this.position.x, this.position.y, radius / 2, radius / 2);
		ellipse(this.position.x + 1, this.position.y - 1, radius, radius);
	};

	// Keep inside borders.
	this.edges = function () {
		// Top.
		if (radius / 2 * -1 + this.position.y < 0) {
			this.velocity.y *= -1;
		}
		// Bottom.
		if (radius / 2 + this.position.y > height) {
			this.velocity.y *= -1;
		}
		// Left.
		if (radius / 2 * -1 + this.position.x < 0) {
			this.velocity.x *= -1;
		}
		// Right.
		if (radius / 2 + this.position.x > width) {
			this.velocity.x *= -1;
		}
	};
}

// Window resizer.
function windowResized() {
	resizeCanvas(windowWidth, 400);
}
'use strict';

/**
 * File skip-link-focus-fix.js.
 *
 * Helps with accessibility for keyboard only users.
 *
 * Learn more: https://git.io/vWdr2
 */
(function () {
	var isWebkit = navigator.userAgent.toLowerCase().indexOf('webkit') > -1,
	    isOpera = navigator.userAgent.toLowerCase().indexOf('opera') > -1,
	    isIe = navigator.userAgent.toLowerCase().indexOf('msie') > -1;

	if ((isWebkit || isOpera || isIe) && document.getElementById && window.addEventListener) {
		window.addEventListener('hashchange', function () {
			var id = location.hash.substring(1),
			    element;

			if (!/^[A-z0-9_-]+$/.test(id)) {
				return;
			}

			element = document.getElementById(id);

			if (element) {
				if (!/^(?:a|select|input|button|textarea)$/i.test(element.tagName)) {
					element.tabIndex = -1;
				}

				element.focus();
			}
		}, false);
	}
})();
'use strict';

/**
 * File super-heroine.js
 *
 */
var listOne = ['INFJ', 'WordPress', 'Creative', 'Coding', 'Inclusive'];
var listTwo = ['Hula Hooper', 'Poet', 'Writer', 'Curator', 'Detective', 'Technologist', 'Feminist', 'of the Internet', 'Aesthetician', 'Daydreamer'];

var interval = 3000;
var wordHistory = '';

// **Grab elements.
var containerNumber = document.getElementsByClassName('text-shifting');

identityCycle(containerNumber[0], listOne);

// Stagger switching timing.
setTimeout(function () {
	identityCycle(containerNumber[1], listTwo);
}, interval / 2);

// **Start it off.
function identityCycle(container, whichList) {

	setInterval(function () {
		replaceContent(container, whichList);
	}, interval);
};

// **Choose random word from chosen array.
function getRandomWords(listChoice) {
	var word = listChoice[Math.floor(Math.random() * listChoice.length)];
	return word;
}

// **Markup Replacement.
function replaceContent(container, whichList) {

	var identity = getRandomWords(whichList);
	var noRepeat = compareWords(identity);

	// **Replace.
	if (noRepeat) {
		container.textContent = identity;
	} else {
		replaceContent(container);
	}

	wordHistory = identity;
}

function compareWords(currentWord) {
	if (currentWord === wordHistory) {
		return false;
	} else {
		return true;
	}
}
'use strict';

/**
 * File window-ready.js
 *
 * Add a "ready" class to <body> when window is ready.
 */
window.Window_Ready = {};
(function (window, $, that) {

	// Constructor.
	that.init = function () {
		that.cache();
		that.bindEvents();
	};

	// Cache document elements.
	that.cache = function () {
		that.$c = {
			window: $(window),
			body: $(document.body)
		};
	};

	// Combine all events.
	that.bindEvents = function () {
		that.$c.window.load(that.addBodyClass);
	};

	// Add a class to <body>.
	that.addBodyClass = function () {
		that.$c.body.addClass('ready');
	};

	// Engage!
	$(that.init);
})(window, jQuery, window.Window_Ready);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
